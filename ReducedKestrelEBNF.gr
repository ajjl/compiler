# ReducedKestrekEBNF.gr the ebnf grammar for ReducedKestrek (not as bad-ass as kestrel)
# Auhor: Douglas W. Jones/ Alexander Leinoff
# Date: Whatever the commit log says 
# Taken from http://www.cs.uiowa.edu/~jones/compiler/kestrel/definition.shtml, and reduced alot

# I think we are turing complete? we have assignment of ints to unlimited
# variables. +- addition between variables and constants and variables and
# eachother. while loops and if statements that use equals and not equals
# comaprison. that should be everything for T-Completeness

> <kestrel program>
/ <empty>

<kestrel program> ::= <block> <end of file>

<block> ::= { <block element> [ ";" ] }

<block element> ::= <declaration>
                 |  <statement>

# Declarations
<declaration> ::= <identifier> ":"  <declarator>

<declarator> ::= <variable declarator>

<variable declarator> ::= "var" "int"
# only refrences (variable types) are just pure identifyers (for now ints)
<reference> ::= <identifier>


# Statements
<statement> ::= <assignment>
	      | <if>
	      | <while>

### Assign constant to variable
<assignment> ::= <reference> "=" <number>
               | <reference> "=" <arithmetic_expression> # Assign result of arithmetic expression to variable

### if statement no else statements
<if> ::= "if" <comparison_expression> 
	         <block>
	 "end"
<while> ::= "while" <comparison_expression> 
		<block>
	 "end"

## arithmetic, you can do x +6, or x + y, but not 4 + x, variable must come first
<arithmetic_expression> ::= <reference> <arithmetic_operator> <number>
                          | <reference> <arithmetic_operator> <reference>

<arithmetic_operator> ::= "+"
                        | "-"


### only existing expression if comparisons ( equals or not equals)
<comparison_expression> ::= <reference> <comparison_operator> <number>

<comparison_operator> ::= "="
                        | "/="
